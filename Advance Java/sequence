0 REST clnt sends the request to REST server
http://host:port/day14_rest_srvr/depts/10/emps/123
In REST Controller -- DeptController
@RquestMapping("/depts") --cls level
@GetMapping("/{dept_id}/emps/{emp_id}")
public ResponseEntity<?> getDetails(@PathVariable int dept_id,@PathVariable int emp_id){....}


1. Image handling
eclipse project -(non spring boot) --
REST Server -- day14.1 (except emp update)
HOw to add image handling support to Spring web app?
1. Copy file-upload.xml under <resourecs> --to configure MultipartResolver bean --which will auto upload the contents from clnt to server.
i/f & imple class (Apache)
2. Import file-upload.xml in master config file(spring-servlet.xml)
<import resource="classpath:/file-upload.xml" />
3. In the Controller/RestController
In @PostMapping or @PutMapping, add 
@RequestParam MultiPartFile image -- to refer to the uploaded contents.
o.s.w.m.MultiPartFile --i/f
A representation of an uploaded file received in a multipart request(via form with enctype="multipart/for-data")

2. Maven

3. Spring Boot
Objective -Building back end(REST server) for ang front end app (Emp CRUD + image handling)
Sprin Boot application , when packaged as JAR, supplies default starting point(main(..) class).
How to tell Spring Boot that it's a starting point

@SpringBootApplication --class level annotation

@SpringBootApplication = @Configuration + @EnableAutoConfiguration + @ComponentScan

@Configuration --alternative to spring bean config xml 
@EnableAutoConfiguration --enables auto config support
@ComponentScan --alternative to <context:component-scan base-package="com.app"/>
def value of @ComponentScan -- current pkg.
Spring Boot Eclipse projects
1. day14.2_spring_boot -- Spring Boot + Hibernate Native API(Session) ,used by unwrapping it in DAO layer.
2. day15_boot_demo --Spring Boot + JPA API(EntityManager)

3. day14.3_spring_data_jpa --Spring Boot + Spring Data JPA support(NO DAO Implementation class , just DAO layer i/f extending from JpaRepository)

------------------------------
4. 
Understanding hibernate-persistence.xml & tx management
1. Supply the location of DB property file .
<context:property-placeholder 
location="classpath:/database.properties" />
2.Configure a spring bean , to create Apache supplied connection pool.
I/F --javax.sql.DataSource (represents Connection pool)
Imple class --Apache supplied --org.apache.commons.dbcp2.BasicDataSource
Inject CP(connection pool) properties via setter Based D.I

3. Configure SessionFactory bean , supplied by Spring.
i/f --org.hibernate.SessionFactory (hibernate supplied)
SF provider -- o.s.orm.hibernate5.LocalSessionFactoryBean
Inject SF properties via setter Based D.I
eg : packgesToScan, show_sql , hbm2ddl.auto
Inject the ref of CP bean into SF

4. Configure spring supplied tx manager bean , to automate tx management(using @Transactional)
I/F : o.s.transaction.PlatformTransactionManager
Implementation class --o.s.orm.hibernate5.HibernateTransactionManager
Inject SF ref into tx mgr bean.

5. Enable annotation based tx support
<tx:annotationDriven/>

4. Understanding Transaction Management in Spring

How to automate Tx management in spring?
1. Add spring supplied tx manager bean in config file
<bean id="transactionManager" 		class="org.springframework.orm.hibernate5.HibernateTransactionManager"
p:sessionFactory-ref="sessionFactory">
</bean>
2.  Enable tx annotation support
	<tx:annotation-driven />

3. Use @Transactional annotation typically in Service or DAO Layer.

Internals of auto tx management
ref : spring-tx-management.png (from day12_help)

4. How to customize tx management -- using @Transactional attributes
4.1 timeout
eg : @Transactional(timeout=10)
service/dao layer method
4.2 readOnly -- 
def value --false
eg : @Transactional(readOnly=true)
4.3 rollback rules
@Transactional(rollbackFor = IOException.class, noRollbackFor = RuntimeException.class)
public void doSomething(...)

4.4 Tx propagation level
refer to "transactions.txt"

4.5 Tx isolation level
refer to "transactions.txt"
eg : to set it to max privacy mode(where all issues are gone)
@Transaction(isolation=Isolation.SERIALIZABLE)
public void serviceMethod(){...}


5. Many to Many association --project tip
 Many-many relationship between entities
(spring hibernate core java project--excellent for testing Service--DAO--POJO layers)
Layers -- Tester --Service--DAO--POJO
Then can integrate in web app.
eg : Course *<----->* Student
BI dir association.
Suggestions 
1. Choose Set i/f instead of List , to enhance performance.
2. Add convenience methods (helper methods)
3. Override correctly as per the contract(equal objs MUST produce SAME hashcode) equals n hashCode methods.
If possible use -- unique data members(eg : email , courseName...) in overriding the methods.
4. Never choose CascadeType.REMOVE 
since it will delete data unnecessarily.
CascadeTypes -- PERSIST,MERGE
5. You can make any side as the owning side (no specific rule)
The side in which join table(asso table/intermediate table) appears is the owning side.
mappedBy --must appear in the inverse side.
Value of mappedBy=name of the prop as it appears in the owning side.
In Course POJO ---owning side
@ManyToMany(cascade = {CascadeType.PERSIST,CascadeType.MERGE})
@JoinTable(name = "courses_studs",joinColumns = @JoinColumn(name="c_id"),inverseJoinColumns = @JoinColumn(name="stud_id"))
public Set<Student> getStudents() {
  return students;
}
Inverse side -- Student
private Set<Course> courses=new HS<>();
@ManyToMany(mappedBy="students")
public Set<Course> getCourses(){...}

eclipse project : day15.1
(database : test_dmc, tables -- courses,students,courses_studs)
-----------------------
2. get vs load(Hibernate Session API)
exam/interview objective
(in above project --In StudentDaoImpl class , replace get by load)

3. Session API
evict , clear


4. Spring AOP --exam objective --check
Aspect Oriented Programming.
eclipse project --test_aop_simple

4.5 Similar separation of B.L from cross cutting concerns(=recurring tasks) in Servlet architecture
--Servlet Filter
ref : readme_filter

5. Maven -- day14_maven

6. JNDI --Java naming and Directory i/f (Naming service)
eclipse project --test_jndi
exam objective

7. P.L Validations, update , versioning
day15.2

8. Send Mail --ref : spring_demo

9. JSP custom tags -- 
custom_tags  --exam objective
readme
readymade eclipse project --


Readymade demos(eclipse projects)
1.file upload w/o spring boot 
spring_mvc_image_upload2

2.many to many
day15.1

3. spring aop
test_aop_simple

4. Hibernate session api
hibernate_session_api

5.Customizing tx attributes(tx propagation)
spring_jpa_txs_new2
(refer : transactions.txt)

6.maven
day15_maven

7. Spring Boot testing (Unit testing/integrational testing)
projects under spring-boot-test

8. i18n demo
spring_demo

9. design patterns
refer to its readme from design-patterns

10.Presentation logic  validations , @Version(optimistic locking), updating details
day15.2

11. inheritance in hibernate

12. composite PK
spring_hib_composite_pk


13.JPQL
named query
criteria query 
native query
hibernate stored proc
ref : spring_javase_hibernate

14.exam help


15 SOAP vs REST







	


