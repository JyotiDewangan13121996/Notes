In entire web application ,the DAO layer usually consists of a lot of boilerplate code(CRUD operations) that can  be simplified.

Benefits of simplification
1. Decrease in the number of artifacts that we need to define and maintain
2. Consistency of data access patterns and consistency of configuration.

Spring Data JPA : (ref : Spring Data JPA reference doc)
What is it ?
It's an abstraction of JPA.
Why ?
Spring Data framework simplifies JPA to such an extent that it removes the DAO implementations entirely(since it's full of boilerplate code)
The interface of the DAO is now the only layer that we need to explicitly define.

How ?
Simple add spring data JPA starter dependency in your spring boot project.

DAO interface needs to extend the JPA specific Repository interface – JpaRepository or its super i/f CrudRepository(from the pkg o.s.data.repository)
This will allow Spring Data to find this interface and automatically create an implementation for it.

By extending the interface we get the most required CRUD methods for standard data access available in a standard DAO.

eg :o.s.data.repository.CRUDRepository methods
long 	count()
Returns the number of entities available.
void 	delete(T entity)
Deletes a given entity.
void 	deleteAll()
Deletes all entities managed by the repository.
void 	deleteAll(Iterable<? extends T> entities)
Deletes the given entities.
void 	deleteById(ID id)
Deletes the entity with the given id.
boolean 	existsById(ID id)
Returns whether an entity with the given id exists.
Iterable<T> 	findAll()
Returns all instances of the type.
Iterable<T> 	findAllById(Iterable<ID> ids)
Returns all instances of the type with the given IDs.
Optional<T> 	findById(ID id)
Retrieves an entity by its id.
Java SE 8 --java.util.Optional<T> class method
public T get()
Returns the object if found , otherwise throws NoSuchElementException.

<S extends T>
S save(S entity)
Saves or updates  a given entity.
<S extends T>
Iterable<S> 	saveAll(Iterable<S> entities)
Saves all given entities.

Methods of o.s.data.jpa.repository.JpaRepository
void 	deleteAllInBatch()
Deletes all entities in a batch call.
void 	deleteInBatch(Iterable<T> entities)
Deletes the given entities in a batch which means it will create a single Query for deletion.

List<T> 	findAll() 
<S extends T>
List<S> 	findAll(Example<S> example) 
<S extends T>
List<S> 	findAll(Example<S> example, Sort sort) 
List<T> 	findAll(Sort sort) 
List<T> 	findAllById(Iterable<ID> ids) 
void 	flush()
Flushes all pending changes to the database.
T 	getOne(ID id)
Returns a reference to the entity with the given identifier.
<S extends T>
List<S> 	saveAll(Iterable<S> entities) 



3. Custom Access Method and Queries
By extending one of the Repository interfaces, the DAO will already have some basic CRUD methods (and queries) defined and implemented.

To define more specific access methods, Spring JPA supports quite a few options:

1. simply define a new method in the interface
provide the actual JPQ query by using the @Query annotation
When Spring Data creates a new Repository implementation, it analyses all the methods defined by the interfaces and tries to automatically generate queries from the method names. While this has some limitations, it’s a very powerful and elegant way of defining new custom access methods with very little effort.
eg :  
Examples
public interface UserRepository extends JpaRepository<User, Long> {

  List<User> findByEmailAddressAndLastname(String emailAddress, String lastname);
}
Generated JPQL
String jpql= select u from User u where u.emailAddress = :emailAddress and u.lastname =:lastname



   Customer findByName(String name);
   List<Person> findByAddressAndLastname(Address address, String lastname);

  // Enables the distinct flag for the query
  List<Person> findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);
  

  // Enabling ignoring case for an individual property
  List<Person> findByLastnameIgnoreCase(String lastname);
  

  // Enabling static ORDER BY for a query
  List<Person> findByLastnameOrderByFirstnameAsc(String lastname);

List<Person> findByAddressZipCode(ZipCode zipCode);

Assuming a Person has an Address with a ZipCode. In that case, the method creates the property traversal x.address.zipCode.

Limiting the result size of a query with Top and First

User findFirstByOrderByLastnameAsc();

User findTopByOrderByAgeDesc();

Page<User> queryFirst10ByLastname(String lastname, Pageable pageable);

Slice<User> findTop3ByLastname(String lastname, Pageable pageable);

List<User> findFirst10ByLastname(String lastname, Sort sort);

List<User> findTop10ByLastname(String lastname, Pageable pageable);

2. Or in case of custom queries , can add directly in DAO i/f.
eg : 
@Query("select u from User u where u.emailAddress = :em")
  User findByEmailAddress(@Param(name="em") String emailAddress);
 
@Query("SELECT p FROM Person p WHERE LOWER(p.name) = LOWER(:nm)")
Foo retrieveByName(@Param("nm") String name);
 

3. Transaction Configuration
The actual implementation of the Spring Data managed DAO is  hidden since we don’t work with it directly. It's implemented by  – the SimpleJpaRepository – which defines default transaction mechanism using annotations.

These can be easily overridden manually per method.

4. Exception Translation is still supplied
Exception translation is still enabled by the use of the @Repository annotation internally applied on the DAO implementation class. 

